"""
Django settings for CapsuleDiary project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#2-w%72^*a(&arrr&*&ag9pv8zmq(ldm_(ifpa6+&@s-^m3k1i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mainapp.apps.MainappConfig',
    'rest_framework',
    'userapp.apps.UserappConfig',
    'operateapp.apps.OperateappConfig',
    # 将django_filters注册
    # 该django-filter库包含一个DjangoFilterBackend类，
    # 该类支持针对REST框架的高度可自定义的字段筛选。
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'CapsuleDiary.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CapsuleDiary.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
# 配置自定义身份验证用户模型
AUTH_USER_MODEL = 'userapp.CustomUser'
# 配置自定义身份验证后端 可以仿照venv\Lib\site-packages\django\conf\global_settings.py里配置文件仿写
AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend',
                           'CapsuleDiary.backends.CustomBackend']
# 配置媒体资源根目录
MEDIA_ROOT = 'media'
# 处理Media_root对应的路由
MEDIA_URL = 'media/'
# 重写DRF默认设置,在rest_framework\settings
# 默认的身份验证类DEFAULT_AUTHENTICATION_CLASSES
# 默认许可类DEFAULT_PERMISSION_CLASSES
REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': [
        # JWT JSON WEB TOKEN 通过算法完成消息校验
        # session是需要在服务器上存储信息，session的值存储在服务器上 sessionID存储在浏览器
        'rest_framework.authentication.SessionAuthentication',
        # Basic认证需要每次都通过用户名和密码 数据不安全
        'rest_framework.authentication.BasicAuthentication',
        # 令牌认证
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    # 配置默认使用的全局分页类,BasePagination为分页类的基类，
    # PageNumberPagination一个简单的基于页码的样式，支持页码查询参数
    # LimitOffsetPagination基于limit限制/offset偏移量的样式
    # CursorPagination加密分页方式，只能通过点击"上一页"、"下一页"访问数据基于游标的分页
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.PageNumberPagination',
    # 'rest_framework.pagination.LimitOffsetPagination',
    # 'rest_framework.pagination.CursorPagination',
    # 'CapsuleDiary.pagination.SuperPageNumberPagination',

    'PAGE_SIZE': 2,
    # 配置过滤DEFAULT_FILTER_BACKENDS：默认的过滤器后端
    # SearchFilter搜索，OrderingFilter排序
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],

}
